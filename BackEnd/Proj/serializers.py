from rest_framework import serializers
from .models import ProjectModel, SubmissionModel, RubricModel, EvaluationModel
from django.contrib.auth import get_user_model
from datetime import datetime, timezone
# import json # For handling complex data that might need JSON serialization/deserialization

User = get_user_model()

class UserSerializer(serializers.ModelSerializer):
    """Serializer for the Django User model."""
    class Meta:
        model = User
        fields = ['id', 'username', 'email']

class ProjectSerializer(serializers.Serializer):
    """
    Serializer for the ProjectModel (DynamoDB).
    Note: Using serializers.Serializer as we're not dealing with Django ORM models directly.
    """
    project_id = serializers.CharField(read_only=True) # UUID generated by model
    title = serializers.CharField(max_length=255)
    description = serializers.CharField()
    created_by_username = serializers.CharField(read_only=True) # Populated by view
    start_date = serializers.DateField(format="%Y-%m-%d") # Expects 'YYYY-MM-DD'
    end_date = serializers.DateField(format="%Y-%m-%d") # Expects 'YYYY-MM-DD'
    is_active = serializers.BooleanField(required=False, default=True)
    created_at = serializers.DateTimeField(read_only=True)
    updated_at = serializers.DateTimeField(read_only=True)

    def create(self, validated_data):
        # Create a PynamoDB ProjectModel instance
        project = ProjectModel(**validated_data)
        project.save()
        return project

    def update(self, instance, validated_data):
        # Update PynamoDB ProjectModel instance
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        from django.utils import timezone
        instance.updated_at = timezone.now()
        instance.save()
        return instance

class SubmissionSerializer(serializers.Serializer):
    """
    Serializer for the SubmissionModel (DynamoDB).
    Handles relationships by ID/username.
    """
    submission_id = serializers.CharField(read_only=True) # UUID generated by model
    project_id = serializers.CharField() # Expected UUID from frontend
    student_username = serializers.CharField(read_only=True) # Populated by view
    report_file_s3_key = serializers.CharField(max_length=500, required=False, allow_null=True, allow_blank=True)
    github_link = serializers.URLField(max_length=500, required=False, allow_null=True, allow_blank=True)
    youtube_link = serializers.URLField(max_length=500, required=False, allow_null=True, allow_blank=True)
    demo_video_file_s3_key = serializers.CharField(max_length=500, required=False, allow_null=True, allow_blank=True)
    submitted_at = serializers.DateTimeField(read_only=True)
    status = serializers.CharField(read_only=True) # Status will be managed by the system

    def create(self, validated_data):
        submission = SubmissionModel(**validated_data)
        submission.save()
        return submission

    def update(self, instance, validated_data):
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        return instance

class RubricSerializer(serializers.Serializer):
    """
    Serializer for the RubricModel (DynamoDB).
    """
    rubric_id = serializers.CharField(read_only=True)
    project_id = serializers.CharField() # Expected UUID from frontend
    criterion = serializers.CharField(max_length=255)
    max_points = serializers.IntegerField()
    description = serializers.CharField(required=False, allow_null=True, allow_blank=True)

    def create(self, validated_data):
        rubric = RubricModel(**validated_data)
        rubric.save()
        return rubric

    def update(self, instance, validated_data):
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        return instance

class EvaluationSerializer(serializers.Serializer):
    """
    Serializer for the EvaluationModel (DynamoDB).
    Handles relationships by ID/username.
    """
    evaluation_id = serializers.CharField(read_only=True)
    submission_id = serializers.CharField() # Expected UUID from frontend
    rubric_id = serializers.CharField() # Expected UUID from frontend
    evaluated_by_username = serializers.CharField(read_only=True) # Populated by view
    points_awarded = serializers.IntegerField()
    feedback = serializers.CharField(required=False, allow_null=True, allow_blank=True)
    evaluated_at = serializers.DateTimeField(read_only=True)

    def create(self, validated_data):
        # Create the composite sort key for the GSI if needed
        # For simplicity, let's assume we don't strictly need it in the main save path
        # It's primarily for GSI indexing, not for direct item creation.
        
        evaluation = EvaluationModel(**validated_data)
        evaluation.save()
        return evaluation

    def update(self, instance, validated_data):
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()
        return instance

